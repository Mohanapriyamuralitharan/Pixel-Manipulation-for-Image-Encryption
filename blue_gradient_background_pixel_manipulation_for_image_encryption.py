# -*- coding: utf-8 -*-
"""Blue Gradient Background Pixel Manipulation for Image Encryption

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ixoib9oTLA0FPWXxV840laq1cqUCTopn
"""

pip install pillow

from PIL import Image
import numpy as np

def encrypt_image(image_path, output_path, key):
    # Open the image and convert to a NumPy array
    image = Image.open(image_path)
    pixels = np.array(image)

    # Apply a basic mathematical operation (e.g., addition) to each pixel
    encrypted_pixels = (pixels + key) % 256

    # Create and save the encrypted image
    encrypted_image = Image.fromarray(encrypted_pixels.astype(np.uint8))
    encrypted_image.save(output_path)
    print(f"Encrypted image saved as {output_path}")

def decrypt_image(image_path, output_path, key):
    # Open the encrypted image and convert to a NumPy array
    image = Image.open(image_path)
    pixels = np.array(image)

    # Reverse the mathematical operation applied during encryption
    decrypted_pixels = (pixels - key) % 256

    # Create and save the decrypted image
    decrypted_image = Image.fromarray(decrypted_pixels.astype(np.uint8))
    decrypted_image.save(output_path)
    print(f"Decrypted image saved as {output_path}")

def main():
    choice = input("Do you want to encrypt or decrypt the image? (e/d): ").lower()
    image_path = input("Enter the path to the image: ")
    output_dir = input("Enter the directory to save the output image: ")
    output_filename = "output_image.png"  # Example output file name
    output_path = f"{output_dir}/{output_filename}"
    key = int(input("Enter the encryption/decryption key (integer value): "))

    if choice == 'e':
        encrypt_image(image_path, output_path, key)
    elif choice == 'd':
        decrypt_image(image_path, output_path, key)
    else:
        print("Invalid choice. Please enter 'e' for encryption or 'd' for decryption.")

if __name__ == "__main__":
    main()



from PIL import Image
import numpy as np

def encrypt_image(image_path, output_path, key):
    # Open the image and convert to a NumPy array
    image = Image.open(image_path)
    pixels = np.array(image)

    # Apply a basic mathematical operation (e.g., addition) to each pixel
    encrypted_pixels = (pixels + key) % 256

    # Create and save the encrypted image
    encrypted_image = Image.fromarray(encrypted_pixels.astype(np.uint8))
    encrypted_image.save(output_path)
    print(f"Encrypted image saved as {output_path}")

def decrypt_image(image_path, output_path, key):
    # Open the encrypted image and convert to a NumPy array
    image = Image.open(image_path)
    pixels = np.array(image)

    # Reverse the mathematical operation applied during encryption
    decrypted_pixels = (pixels - key) % 256

    # Create and save the decrypted image
    decrypted_image = Image.fromarray(decrypted_pixels.astype(np.uint8))
    decrypted_image.save(output_path)
    print(f"Decrypted image saved as {output_path}")

def main():
    choice = input("Do you want to encrypt or decrypt the image? (e/d): ").lower()
    image_path = input("Enter the path to the image: ")
    output_dir = input("Enter the directory to save the output image: ")
    output_filename = "output_image.png"  # Example output file name
    output_path = f"{output_dir}/{output_filename}"
    key = int(input("Enter the encryption/decryption key (integer value): "))

    if choice == 'e':
        encrypt_image(image_path, output_path, key)
    elif choice == 'd':
        decrypt_image(image_path, output_path, key)
    else:
        print("Invalid choice. Please enter 'e' for encryption or 'd' for decryption.")

if __name__ == "__main__":
    main()